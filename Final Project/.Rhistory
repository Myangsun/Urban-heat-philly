chart <- rbind(
c(100, 100, 100),  # Max values
c(0, 0, 0),        # Min values
scores |>
st_drop_geometry() |>
filter(nbh_name %in% my_neighborhoods) |>
select(open_space_coverage:supermarket_density)
)
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9))
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4))
# Plot radar chart
radarchart(chart, title = "Comparison between neighborhoods", pcol=colors_border , pfcol=colors_in )
legend(x=1, y=1, legend = my_neighborhoods, bty = "n", pch=40 , col=colors_in)
my_neighborhoods <- c("Downtown","East Boston")
# Filter, select columns, and add max/min rows in one step
chart <- rbind(
c(100, 100, 100),  # Max values
c(0, 0, 0),        # Min values
scores |>
st_drop_geometry() |>
filter(nbh_name %in% my_neighborhoods) |>
select(open_space_coverage:supermarket_density)
)
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9))
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4))
# Plot radar chart
radarchart(chart, title = "Comparison between neighborhoods", pcol=colors_border , pfcol=colors_in )
legend(x=1, y=1, legend = my_neighborhoods, bty = "n", pch=20 , col=colors_in)
result |>
st_drop_geometry() |>
datatable()
supermarket <- supermarket$osm_points |> select(name)
supermarket <- supermarket$osm_points |> select(name)
library(sf)
library(tidyverse)
library(osmdata)
library(DT)
library(scales)
library(mapview)
library(fmsb)
neighborhood <- st_read("Boston_Neighborhood_Boundaries_Approximated_by_2020_Census_Block_Groups/Boston_Neighborhood_Boundaries_approximated_by_2020_Census_Block_Groups.shp")
neighborhood <- neighborhood |>
select(nbh_name = blockgr202, population = tot_pop_al)
open_space <- st_read("Open_Space/Open_Space.shp") |>
select(id=OBJECTID, area=ShapeSTAre, length=ShapeSTLen)
st_crs(open_space)$epsg
st_crs(open_space)$input
open_space_data <-
st_intersection(open_space, neighborhood) |>
mutate(area = as.numeric(st_area(geometry))) |>
group_by(nbh_name) |>
summarize(sum_area = sum(area)) |>
st_drop_geometry()
bike <- st_read("Existing_Bike_Network_2023/Existing_Bike_Network_2023.shp") |>
st_transform(2249)
st_crs(bike)$epsg
st_crs(bike)$input
bike |> mutate(length = st_length(geometry))
bike |> mutate(length = as.numeric(st_length(geometry)))
bike_data <-
st_intersection(bike, neighborhood)|>
mutate(length = as.numeric(st_length(geometry)))  |>
group_by(nbh_name) |>
summarise(bike_length = sum(length)) |>
st_drop_geometry()
# A bounding box for Boston
bbox = c(-71.188, 42.238, -70.924, 42.393)
supermarket <- opq(bbox)|>
add_osm_feature(key = "shop", value = "supermarket") |>
osmdata_sf()
supermarket <- supermarket$osm_points |> select(name)
mapview(supermarket, legend = FALSE)
supermarket <- supermarket |>
st_transform(2249)
supermarket_data <-
st_join(supermarket, neighborhood)
supermarket_data <-
supermarket_data |>
filter(!is.na(nbh_name)) |>
count(nbh_name, name = "supermarket") |>
st_drop_geometry()
neighborhood <- neighborhood |>
mutate(area = as.numeric(st_area(geometry)))
result <-
neighborhood |>
left_join(open_space_data, by = "nbh_name") |>
left_join(bike_data, by = "nbh_name") |>
left_join(supermarket_data, by = "nbh_name")
result <- result |> filter(nbh_name != "Harbor Islands")
result <- result |>
mutate(open_space_coverage = sum_area/area,
bike_density = bike_length/area,
supermarket_density = supermarket/population) |>
select(nbh_name, open_space_coverage:supermarket_density)
result[is.na(result)] <- 0
result
result |>
st_drop_geometry() |>
datatable()
scores <- result |>
mutate(across(open_space_coverage:supermarket_density,
~ rescale(., to = c(0, 100)) |> round(2)
))
scores |>
st_drop_geometry() |>
datatable()
scores |>
pivot_longer(cols = open_space_coverage:supermarket_density,
names_to = "indicators", values_to = "score") |>
ggplot()+
geom_sf(aes(fill = score))+
facet_wrap(~ indicators)+
scale_fill_viridis_c()+
theme_void()
my_neighborhoods <- c("Downtown","East Boston")
# Filter, select columns, and add max/min rows in one step
chart <- rbind(
c(100, 100, 100),  # Max values
c(0, 0, 0),        # Min values
scores |>
st_drop_geometry() |>
filter(nbh_name %in% my_neighborhoods) |>
select(open_space_coverage:supermarket_density)
)
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9))
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4))
# Plot radar chart
radarchart(chart, title = "Comparison between neighborhoods", pcol=colors_border , pfcol=colors_in )
legend(x=1, y=1, legend = my_neighborhoods, bty = "n", pch=20 , col=colors_in)
shiny::runApp('Desktop/MCP/11.s939 Applied Science in Cities/Final/Urban-heat-philly/Final Project/Urban_Heat')
library(dplyr)
library(sf)
library(ggplot2)
library(tigris)
library(patchwork)
library(viridis)
# Read in the CSV files
lst_2000 <- read.csv("Philadelphia_Landsat7_LST_2000.csv")%>%
mutate(GEOID = as.character(GEOID))
# Function to calculate normalized heat exposure score
calculate_normalized_score <- function(data) {
data |>
mutate(
Mean_LST = mean(mean_LST_Celsius, na.rm = TRUE),
SD_LST = sd(mean_LST_Celsius, na.rm = TRUE),
Normalized_Heat_Score = (mean_LST_Celsius - Mean_LST) / SD_LST
)
}
# Apply the function to each dataset
lst_2000 <- lst_2000 |> calculate_normalized_score()
# Merge each year's LST data with the shapefile
lst_2000_sf <- philly_tracts %>%
left_join(lst_2000, by = "GEOID")
# Download the boundary
chi_bnd <-
places(state = "PA") |>
filter(NAME == "Philadelphia")
# Download census tracts for Pennsylvania (2020)
philly_tracts <- tracts(
state = "PA",         # State abbreviation
county = "Philadelphia", # County name
cb = FALSE,           # Use detailed TIGER/Line boundaries (not simplified)
year = 2020           # Specify the year (2010 Census)
)
# Merge each year's LST data with the shapefile
lst_2000_sf <- philly_tracts %>%
left_join(lst_2000, by = "GEOID")
library(dplyr)
library(sf)
library(ggplot2)
library(tigris)
library(patchwork)
library(viridis)
# Read in the CSV files
lst_2000 <- read.csv("Philadelphia_Landsat7_LST_2000.csv")%>%
mutate(GEOID = as.character(GEOID))
lst_2000 <- read.csv("Urban_Heat/Philadelphia_Landsat7_LST_2000.csv")%>%
library(dplyr)
library(dplyr)
library(sf)
library(ggplot2)
library(tigris)
library(patchwork)
library(viridis)
# Read in the CSV files
lst_2000 <- read.csv("Urban_Heat/Philadelphia_Landsat7_LST_2000.csv")|>
mutate(GEOID = as.character(GEOID))
setwd("/Users/mingyang/Desktop/MCP")
setwd("/Users/mingyang/Desktop/MCP/11.s939 Applied Science in Cities/Final/Urban-heat-philly/Final Project")
library(dplyr)
library(sf)
library(ggplot2)
library(tigris)
library(patchwork)
library(viridis)
# Read in the CSV files
lst_2000 <- read.csv("Urban_Heat/Philadelphia_Landsat7_LST_2000.csv")|>
mutate(GEOID = as.character(GEOID))
lst_2010 <- read.csv("Urban_Heat/Philadelphia_Landsat7_LST_2010.csv")|>
mutate(GEOID = as.character(GEOID))
lst_2020 <- read.csv("Urban_Heat/Philadelphia_Landsat7_LST_2020.csv")|>
mutate(GEOID = as.character(GEOID))
# Calculate Heat Exposure Score and Normalize to 0-1
# Function to calculate normalized heat exposure score
calculate_normalized_score <- function(data) {
data |>
mutate(
Mean_LST = mean(mean_LST_Celsius, na.rm = TRUE),
SD_LST = sd(mean_LST_Celsius, na.rm = TRUE),
Normalized_Heat_Score = (mean_LST_Celsius - Mean_LST) / SD_LST
)
}
# Apply the function to each dataset
lst_2000 <- lst_2000 |> calculate_normalized_score()
lst_2010 <- lst_2010 |> calculate_normalized_score()
lst_2020 <- lst_2020 |> calculate_normalized_score()
# Set the TIGER options for downloading
options(tigris_class = "sf") # Ensure data is downloaded as sf objects
options(tigris_use_cache = TRUE) # Cache downloaded files for reuse
# Download the boundary
chi_bnd <-
places(state = "PA") |>
filter(NAME == "Philadelphia")
# Download census tracts for Pennsylvania (2020)
philly_tracts <- tracts(
state = "PA",         # State abbreviation
county = "Philadelphia", # County name
cb = FALSE,           # Use detailed TIGER/Line boundaries (not simplified)
year = 2020           # Specify the year (2010 Census)
)
# Merge each year's LST data with the shapefile
lst_2000_sf <- philly_tracts %>%
left_join(lst_2000, by = "GEOID")
lst_2010_sf <- philly_tracts %>%
left_join(lst_2010, by = "GEOID")
lst_2020_sf <- philly_tracts %>%
left_join(lst_2020, by = "GEOID")
# Add a year column to each dataset
lst_2000_sf <- lst_2000_sf %>% mutate(year = 2000)
lst_2010_sf <- lst_2010_sf %>% mutate(year = 2010)
lst_2020_sf <- lst_2020_sf %>% mutate(year = 2020)
# Combine into one dataset
lst_combined <- bind_rows(lst_2000_sf, lst_2010_sf, lst_2020_sf)
ggplot(lst_combined, aes(x = as.factor(Year), y = Normalized_Heat_Score, fill = as.factor(Year))) +
geom_boxplot() +
labs(
title = "Normalized Heat Exposure Scores by Year",
x = "Year",
y = "Normalized Heat Exposure Score (Z)"
) +
theme_minimal()
ggplot(lst_combined, aes(x = as.factor(year), y = Normalized_Heat_Scorey)) +
geom_boxplot() +
labs(
title = "Normalized Heat Exposure Scores by Year",
x = "Year",
y = "Normalized Heat Exposure Score (Z)"
) +
theme_minimal()
ggplot(lst_combined, aes(x = as.factor(year), y = Normalized_Heat_Score)) +
geom_boxplot() +
labs(
title = "Normalized Heat Exposure Scores by Year",
x = "Year",
y = "Normalized Heat Exposure Score (Z)"
) +
theme_minimal()
# Find the global min and max LST
global_min <- min(lst_2000_sf$mean_LST_Celsius, lst_2010_sf$mean_LST_Celsius, lst_2020_sf$mean_LST_Celsius, na.rm = TRUE)
global_max <- max(lst_2000_sf$mean_LST_Celsius, lst_2010_sf$mean_LST_Celsius, lst_2020_sf$mean_LST_Celsius, na.rm = TRUE)
# Print the range
print(c(global_min, global_max))
# Map for 2000
map_2000 <- ggplot(data = lst_2000_sf) +
geom_sf(aes(fill = mean_LST_Celsius), color = NA) +
scale_fill_viridis_c(name = "LST (Â°C)", option = "magma", na.value = "white", limits = c(global_min, global_max),direction = -1 ) +
labs(title = "2000") +
theme_minimal()
# Map for 2010
map_2010 <- ggplot(data = lst_2010_sf) +
geom_sf(aes(fill = mean_LST_Celsius), color = NA) +
scale_fill_viridis_c(name = "LST (Â°C)", option = "magma", na.value = "white", limits = c(global_min, global_max),direction = -1 ) +
labs(title = "2010") +
theme_minimal()
# Map for 2020
map_2020 <- ggplot(data = lst_2020_sf) +
geom_sf(aes(fill = mean_LST_Celsius), color = NA) +
scale_fill_viridis_c(name = "LST (Â°C)", option = "magma", na.value = "white", limits = c(global_min, global_max),direction = -1 ) +
labs(title = "2020") +
theme_minimal()
# Combine the maps into a single row
combined_map <- map_2000 + map_2010 + map_2020 +
plot_layout(ncol = 3) & # Arrange in a row with 3 columns
theme(legend.position = "bottom") # Adjust legend position
# Display the combined map
print(combined_map)
View(lst_2000_sf)
# Heat Exposure Score
# Map for 2000
map_2000 <- ggplot(data = lst_2000_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = range(lst_2000_sf$Normalized_Heat_Score, na.rm = TRUE),direction = -1 ) +
labs(title = "2000") +
theme_minimal()
# Map for 2010
map_2010 <- ggplot(data = lst_2010_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = range(lst_2000_sf$Normalized_Heat_Score, na.rm = TRUE),direction = -1 ) +
labs(title = "2010") +
theme_minimal()
# Map for 2020
map_2020 <- ggplot(data = lst_2020_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white",limits = range(lst_2000_sf$Normalized_Heat_Score, na.rm = TRUE),direction = -1 ) +
labs(title = "2020") +
theme_minimal()
# Combine the maps into a single row
combined_map <- map_2000 + map_2010 + map_2020 +
plot_layout(ncol = 3) & # Arrange in a row with 3 columns
theme(legend.position = "bottom") # Adjust legend position
# Display the combined map
print(combined_map)
# Calculate global range for Normalized Heat Scores
global_normalized_min <- min(c(
lst_2000_sf$Normalized_Heat_Score,
lst_2010_sf$Normalized_Heat_Score,
lst_2020_sf$Normalized_Heat_Score
), na.rm = TRUE)
global_normalized_max <- max(c(
lst_2000_sf$Normalized_Heat_Score,
lst_2010_sf$Normalized_Heat_Score,
lst_2020_sf$Normalized_Heat_Score
), na.rm = TRUE)
# Map for 2010
map_2010 <- ggplot(data = lst_2010_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = c(-1,1), na.rm = TRUE),direction = -1 ) +
# Map for 2000
map_2000 <- ggplot(data = lst_2000_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = c(-1,1),direction = -1 ) +
labs(title = "2000") +
theme_minimal()
# Map for 2010
map_2010 <- ggplot(data = lst_2010_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = c(-1,1), na.rm = TRUE),direction = -1 ) +
# Heat Exposure Score
# Map for 2000
map_2000 <- ggplot(data = lst_2000_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = c(-1,1),direction = -1 ) +
labs(title = "2000") +
theme_minimal()
# Map for 2010
map_2010 <- ggplot(data = lst_2010_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = c(-1,1),direction = -1 ) +
labs(title = "2010") +
theme_minimal()
# Map for 2020
map_2020 <- ggplot(data = lst_2020_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white",limits = c(-1,1),direction = -1 ) +
labs(title = "2020") +
theme_minimal()
# Combine the maps into a single row
combined_map <- map_2000 + map_2010 + map_2020 +
plot_layout(ncol = 3) & # Arrange in a row with 3 columns
theme(legend.position = "bottom") # Adjust legend position
# Display the combined map
print(combined_map)
# Calculate global range for Normalized Heat Scores
global_normalized_min <- min(c(
lst_2000_sf$Normalized_Heat_Score,
lst_2010_sf$Normalized_Heat_Score,
lst_2020_sf$Normalized_Heat_Score
), na.rm = TRUE)
global_normalized_max <- max(c(
lst_2000_sf$Normalized_Heat_Score,
lst_2010_sf$Normalized_Heat_Score,
lst_2020_sf$Normalized_Heat_Score
), na.rm = TRUE)
print(c(global_normalized_min, global_normalized_max))
# Function to scale values to the range [-1, 1]
scale_to_minus_one_to_one <- function(data) {
data |>
mutate(
Scaled_Heat_Score = 2 * (Normalized_Heat_Score - global_normalized_min) / (mglobal_normalized_max - global_normalized_min) - 1
)
}
# Apply the scaling function to each dataset
lst_2000_sf <- scale_to_minus_one_to_one(lst_2000_sf)
# Heat Exposure Score
# Map for 2000
map_2000 <- ggplot(data = lst_2000_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = c(-1,1),direction = -1 ) +
labs(title = "2000") +
theme_minimal()
# Map for 2010
map_2010 <- ggplot(data = lst_2010_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = c(-1,1),direction = -1 ) +
labs(title = "2010") +
theme_minimal()
# Map for 2020
map_2020 <- ggplot(data = lst_2020_sf) +
geom_sf(aes(fill = Normalized_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white",limits = c(-1,1),direction = -1 ) +
labs(title = "2020") +
theme_minimal()
# Combine the maps into a single row
combined_map <- map_2000 + map_2010 + map_2020 +
plot_layout(ncol = 3) & # Arrange in a row with 3 columns
theme(legend.position = "bottom") # Adjust legend position
# Display the combined map
print(combined_map)
map_2000 <- ggplot(data = lst_2000_sf) +
geom_sf(aes(fill = Scaled_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = c(-1,1),direction = -1 ) +
labs(title = "2000") +
theme_minimal()
# Map for 2010
map_2010 <- ggplot(data = lst_2010_sf) +
geom_sf(aes(fill = Scaled_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = c(-1,1),direction = -1 ) +
labs(title = "2010") +
theme_minimal()
# Map for 2020
map_2020 <- ggplot(data = lst_2020_sf) +
geom_sf(aes(fill = Scaled_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white",limits = c(-1,1),direction = -1 ) +
labs(title = "2020") +
theme_minimal()
# Combine the maps into a single row
combined_map <- map_2000 + map_2010 + map_2020 +
plot_layout(ncol = 3) & # Arrange in a row with 3 columns
theme(legend.position = "bottom") # Adjust legend position
# Display the combined map
print(combined_map)
global_normalized_min <- min(c(
lst_2000_sf$Normalized_Heat_Score,
lst_2010_sf$Normalized_Heat_Score,
lst_2020_sf$Normalized_Heat_Score
), na.rm = TRUE)
global_normalized_max <- max(c(
lst_2000_sf$Normalized_Heat_Score,
lst_2010_sf$Normalized_Heat_Score,
lst_2020_sf$Normalized_Heat_Score
), na.rm = TRUE)
print(c(global_normalized_min, global_normalized_max))
# Function to scale values to the range [-1, 1]
scale_to_minus_one_to_one <- function(data) {
data |>
mutate(
Scaled_Heat_Score = 2 * (Normalized_Heat_Score - global_normalized_min) / (mglobal_normalized_max - global_normalized_min) - 1
)
}
# Apply the scaling function to each dataset
lst_2000_sf <- scale_to_minus_one_to_one(lst_2000_sf)
# Calculate global range for Normalized Heat Scores
global_normalized_min <- min(c(
lst_2000_sf$Normalized_Heat_Score,
lst_2010_sf$Normalized_Heat_Score,
lst_2020_sf$Normalized_Heat_Score
), na.rm = TRUE)
global_normalized_max <- max(c(
lst_2000_sf$Normalized_Heat_Score,
lst_2010_sf$Normalized_Heat_Score,
lst_2020_sf$Normalized_Heat_Score
), na.rm = TRUE)
print(c(global_normalized_min, global_normalized_max))
# Function to scale values to the range [-1, 1]
scale_to_minus_one_to_one <- function(data) {
data |>
mutate(
Scaled_Heat_Score = 2 * (Normalized_Heat_Score - global_normalized_min) / (global_normalized_max - global_normalized_min) - 1
)
}
# Apply the scaling function to each dataset
lst_2000_sf <- scale_to_minus_one_to_one(lst_2000_sf)
lst_2010_sf <- scale_to_minus_one_to_one(lst_2010_sf)
lst_2020_sf <- scale_to_minus_one_to_one(lst_2020_sf)
# Heat Exposure Score
# Map for 2000
map_2000 <- ggplot(data = lst_2000_sf) +
geom_sf(aes(fill = Scaled_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = c(-1,1),direction = -1 ) +
labs(title = "2000") +
theme_minimal()
# Map for 2010
map_2010 <- ggplot(data = lst_2010_sf) +
geom_sf(aes(fill = Scaled_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white", limits = c(-1,1),direction = -1 ) +
labs(title = "2010") +
theme_minimal()
# Map for 2020
map_2020 <- ggplot(data = lst_2020_sf) +
geom_sf(aes(fill = Scaled_Heat_Score), color = NA) +
scale_fill_viridis_c(name = "Heat Exposure Score", option = "magma", na.value = "white",limits = c(-1,1),direction = -1 ) +
labs(title = "2020") +
theme_minimal()
# Combine the maps into a single row
combined_map <- map_2000 + map_2010 + map_2020 +
plot_layout(ncol = 3) & # Arrange in a row with 3 columns
theme(legend.position = "bottom") # Adjust legend position
# Display the combined map
print(combined_map)
st_crs(lst_2000_sf)
st_crs(chi_bnd)
st_crs(philly_tracts)
